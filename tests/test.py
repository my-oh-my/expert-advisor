import argparse
from datetime import datetime

import pandas as pd
import pendulum
from pandas import DataFrame
from xtb.wrapper.xtb_client import APIClient, loginCommand

from ea.backtesting.backtesting import Backtest
from ea.backtesting.consolidationbacktest import ConsolidationBacktest
from ea.strategies.indicators.consolidation import Consolidation
from ea.strategies.indicators.waves import Waves
from ea.trading.expert_advisor import ExpertAdvisorSettings, ExpertAdvisor

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.width', 1000)


def prepare():
    data = [
        [1621202400.0, 2085.0, 2120.6, 2124.5, 2081.5, 42861.0],
        [1621288800.0, 2141.0, 2129.5, 2145.6, 2124.5, 31413.0],
        [1621375200.0, 2116.0, 2108.6, 2122.5, 2101.6, 41498.0],
        [1621461600.0, 2124.0, 2130.5, 2130.6, 2095.5, 40918.0],
        [1621548000.0, 2133.0, 2135.5, 2142.5, 2119.6, 32859.0],
        [1621807200.0, 2135.5, 2131.5, 2135.5, 2122.5, 22080.0],
        [1621893600.0, 2140.0, 2154.5, 2154.5, 2125.5, 31755.0],
        [1621980000.0, 2159.0, 2160.6, 2168.5, 2138.6, 33015.0],
        [1622066400.0, 2153.0, 2198.5, 2205.5, 2152.6, 44771.0],
        [1622152800.0, 2202.0, 2232.5, 2233.5, 2201.5, 30584.0],
        [1622412000.0, 2239.5, 2232.5, 2247.5, 2227.5, 22340.0],
        [1622498400.0, 2230.5, 2233.5, 2266.5, 2224.6, 33553.0],
        [1622584800.0, 2224.5, 2241.6, 2253.5, 2224.5, 25379.0],
        [1622757600.0, 2239.0, 2238.6, 2257.5, 2227.5, 32596.0],
        [1623016800.0, 2246.0, 2253.5, 2270.6, 2244.5, 27582.0],
        [1623103200.0, 2247.0, 2241.5, 2248.5, 2224.5, 34980.0],
        [1623189600.0, 2239.0, 2213.6, 2243.5, 2211.5, 25681.0],
        [1623276000.0, 2216.0, 2237.5, 2241.5, 2211.5, 28900.0],
        [1623362400.0, 2241.0, 2224.5, 2241.0, 2221.5, 22454.0],
        [1623621600.0, 2230.0, 2242.5, 2247.5, 2226.6, 22565.0],
        [1623708000.0, 2254.0, 2231.5, 2270.5, 2231.5, 45882.0],
        [1623794400.0, 2228.5, 2229.6, 2243.6, 2226.5, 39587.0],
        [1623880800.0, 2215.0, 2209.5, 2219.5, 2204.5, 21754.0],
        [1623967200.0, 2181.6, 2180.5, 2190.5, 2171.5, 32559.0],
        [1624226400.0, 2168.0, 2188.5, 2192.5, 2157.5, 31103.0],
        [1624312800.0, 2192.0, 2189.5, 2204.5, 2173.5, 24550.0],
        [1624399200.0, 2200.0, 2200.5, 2208.5, 2184.5, 20348.0],
        [1624485600.0, 2203.0, 2243.5, 2244.5, 2202.5, 26900.0],
        [1624572000.0, 2246.0, 2243.5, 2258.6, 2235.6, 35405.0],
        [1624831200.0, 2256.0, 2253.5, 2259.5, 2227.5, 22409.0],
        [1624917600.0, 2252.0, 2230.5, 2253.6, 2219.5, 26993.0],
        [1625004000.0, 2227.0, 2195.5, 2233.5, 2194.5, 32063.0],
        [1625090400.0, 2191.0, 2222.5, 2222.5, 2191.0, 32177.0],
        [1625176800.0, 2221.0, 2221.5, 2238.6, 2217.6, 20316.0],
        [1625436000.0, 2218.1, 2226.7, 2233.6, 2217.7, 10080.0],
        [1625522400.0, 2224.1, 2200.6, 2235.7, 2200.6, 13547.0],
        [1625608800.0, 2204.1, 2256.6, 2264.7, 2203.6, 34412.0],
        [1625695200.0, 2251.1, 2206.7, 2251.7, 2204.6, 32672.0],
        [1625781600.0, 2221.1, 2220.6, 2230.6, 2205.6, 21965.0],
        [1626040800.0, 2224.1, 2228.7, 2232.6, 2213.6, 13299.0],
        [1626127200.0, 2229.1, 2239.6, 2250.6, 2228.7, 20221.0],
        [1626213600.0, 2230.6, 2238.6, 2250.7, 2230.6, 18272.0],
        [1626300000.0, 2235.7, 2238.7, 2253.7, 2229.6, 32029.0],
        [1626386400.0, 2238.1, 2230.6, 2249.6, 2229.6, 22429.0],
        [1626645600.0, 2224.3, 2181.7, 2225.8, 2174.6, 36048.0],
        [1626732000.0, 2190.1, 2192.7, 2198.7, 2173.6, 29051.0],
        [1626818400.0, 2202.1, 2227.7, 2233.6, 2196.6, 33891.0],
        [1626904800.0, 2232.1, 2212.7, 2234.6, 2205.6, 22831.0],
        [1626991200.0, 2221.1, 2220.7, 2223.6, 2214.6, 14467.0],
        [1627250400.0, 2216.1, 2219.6, 2223.6, 2200.7, 23547.0],
        [1627336800.0, 2218.6, 2198.6, 2218.7, 2192.6, 30793.0],
        [1627423200.0, 2202.1, 2219.6, 2226.6, 2199.6, 21903.0],
        [1627509600.0, 2226.7, 2242.6, 2243.6, 2226.7, 19612.0],

        [1627596000.0, 2227.1, 2229.6, 2235.6, 2222.7, 18622.0],
        [1627855200.0, 2245.1, 2233.7, 2247.6, 2226.6, 18536.0],
        [1627941600.0, 2229.7, 2227.7, 2247.6, 2222.6, 28782.0],
        [1628028000.0, 2238.6, 2246.6, 2258.6, 2236.6, 23409.0],
        [1628114400.0, 2243.1, 2249.6, 2250.6, 2236.6, 16829.0],
        [1628200800.0, 2249.1, 2247.6, 2250.7, 2231.6, 22650.0],
        [1628460000.0, 2248.1, 2253.7, 2256.6, 2242.6, 15822.0],
        [1628546400.0, 2251.6, 2247.7, 2260.6, 2243.6, 16061.0],
        [1628632800.0, 2247.7, 2255.6, 2258.6, 2237.6, 18286.0],
        [1628719200.0, 2254.1, 2271.6, 2273.6, 2252.6, 18347.0],
        [1628805600.0, 2271.6, 2267.6, 2274.6, 2266.6, 12957.0],
        [1629064800.0, 2264.1, 2257.7, 2270.7, 2255.7, 16555.0],
        [1629151200.0, 2258.1, 2268.7, 2275.6, 2256.6, 27527.0],
        [1629237600.0, 2273.1, 2260.6, 2280.6, 2250.6, 22095.0],
        [1629324000.0, 2245.1, 2234.7, 2246.6, 2219.6, 33610.0],
        [1629410400.0, 2237.1, 2233.6, 2239.6, 2225.6, 20035.0],
        [1629669600.0, 2246.6, 2264.6, 2265.6, 2242.6, 17805.0],
        [1629756000.0, 2269.1, 2269.6, 2272.6, 2259.6, 20362.0],
        [1629842400.0, 2271.1, 2294.7, 2295.6, 2265.6, 21446.0],
        [1629928800.0, 2288.1, 2284.7, 2302.6, 2282.6, 21352.0],
        [1630015200.0, 2289.1, 2293.7, 2300.6, 2271.6, 22860.0],
        [1630274400.0, 2296.1, 2325.7, 2326.6, 2295.6, 22578.0],
        [1630360800.0, 2335.6, 2340.6, 2357.6, 2327.6, 31206.0],
        [1630447200.0, 2354.1, 2351.7, 2365.6, 2343.7, 32901.0],
        [1630533600.0, 2349.1, 2364.6, 2367.6, 2342.7, 27608.0],
        [1630620000.0, 2368.7, 2351.6, 2369.7, 2346.6, 21277.0],
        [1630879200.0, 2358.1, 2391.6, 2391.6, 2355.6, 18709.0],
        [1630965600.0, 2389.1, 2368.7, 2391.6, 2367.6, 26795.0],
        [1631052000.0, 2366.7, 2347.6, 2367.6, 2340.8, 30779.0],
        [1631138400.0, 2340.1, 2335.6, 2344.6, 2323.6, 32876.0],
        [1631224800.0, 2341.1, 2340.6, 2355.6, 2337.7, 23638.0],
        [1631484000.0, 2345.1, 2363.6, 2364.6, 2342.6, 35148.0],
        [1631570400.0, 2363.1, 2375.6, 2382.6, 2354.6, 43235.0],
        [1631656800.0, 2374.1, 2356.6, 2374.1, 2349.6, 54128.0],
        [1631743200.0, 2354.7, 2352.6, 2365.6, 2345.6, 25167.0],
        [1631829600.0, 2360.1, 2332.6, 2360.6, 2329.6, 38002.0],
        [1632088800.0, 2309.1, 2276.6, 2309.1, 2262.6, 51729.0],
        [1632175200.0, 2287.6, 2275.6, 2300.6, 2274.7, 44276.0],
        [1632261600.0, 2287.1, 2332.6, 2333.6, 2287.1, 36200.0],
        [1632348000.0, 2338.1, 2311.7, 2350.6, 2311.6, 45569.0],
        [1632434400.0, 2319.1, 2297.7, 2322.6, 2293.6, 35001.0],
        [1632693600.0, 2309.1, 2286.6, 2311.7, 2281.6, 35018.0],
        [1632780000.0, 2288.1, 2271.6, 2293.6, 2267.6, 36109.0],
        [1632866400.0, 2273.1, 2288.6, 2295.6, 2270.6, 29312.0],
        [1632952800.0, 2300.1, 2302.7, 2309.6, 2293.6, 33687.0],
        [1633039200.0, 2282.1, 2324.7, 2328.6, 2280.6, 47854.0],
        [1633298400.0, 2320.1, 2330.7, 2355.6, 2303.7, 46821.0],
        [1633384800.0, 2326.1, 2361.6, 2361.7, 2320.7, 29213.0],
        [1633471200.0, 2347.1, 2351.6, 2357.6, 2327.6, 47729.0],
        [1633557600.0, 2361.1, 2357.6, 2362.6, 2331.6, 41322.0],
        [1633644000.0, 2345.1, 2410.6, 2414.6, 2345.1, 40696.0],
        [1633903200.0, 2412.1, 2450.6, 2456.6, 2403.7, 35222.0],
        [1633989600.0, 2438.1, 2478.6, 2479.6, 2429.6, 41522.0],
        [1634076000.0, 2469.1, 2458.7, 2471.7, 2443.6, 35180.0],
        [1634162400.0, 2467.1, 2467.6, 2476.6, 2452.6, 32196.0],
        [1634248800.0, 2471.1, 2454.6, 2471.1, 2441.7, 27607.0],
        [1634508000.0, 2449.1, 2463.6, 2478.6, 2449.1, 27940.0],
        [1634594400.0, 2469.6, 2447.7, 2473.6, 2443.6, 27055.0],
        [1634680800.0, 2446.1, 2446.7, 2457.6, 2437.6, 23872.0],
        [1634767200.0, 2436.1, 2428.7, 2436.6, 2424.6, 24784.0],
        [1634853600.0, 2433.1, 2420.6, 2440.6, 2417.6, 23809.0],
        [1635112800.0, 2427.1, 2428.6, 2431.6, 2419.6, 22630.0],
        [1635199200.0, 2439.1, 2429.7, 2447.6, 2422.6, 24365.0],
        [1635285600.0, 2427.1, 2406.6, 2428.6, 2394.6, 34088.0],
        [1635372000.0, 2409.1, 2402.6, 2410.7, 2396.6, 23069.0],
        [1635458400.0, 2397.1, 2401.7, 2423.6, 2380.7, 37759.0],
        [1635807600.0, 2419.1, 2413.6, 2423.6, 2391.7, 39603.0],
        [1635894000.0, 2410.1, 2380.6, 2432.6, 2376.6, 37619.0],
        [1635980400.0, 2388.1, 2436.6, 2442.6, 2387.6, 39688.0],
        [1636066800.0, 2440.1, 2439.6, 2445.7, 2424.6, 31349.0],
        [1636326000.0, 2444.1, 2425.6, 2450.6, 2420.6, 24618.0],
        [1636412400.0, 2423.1, 2406.7, 2425.6, 2399.6, 33020.0],
        [1636498800.0, 2404.1, 2369.6, 2413.6, 2361.6, 36177.0],
        [1636671600.0, 2373.1, 2371.6, 2394.6, 2365.6, 36842.0],
        [1636930800.0, 2371.1, 2343.6, 2390.6, 2342.6, 42750.0],
        [1637017200.0, 2343.6, 2335.6, 2357.6, 2335.6, 31545.0],
        [1637103600.0, 2344.1, 2323.6, 2357.6, 2313.6, 31224.0],
        [1637190000.0, 2327.1, 2266.7, 2327.1, 2261.7, 44515.0],
        [1637276400.0, 2282.1, 2249.6, 2293.7, 2222.6, 61140.0],
        [1637535600.0, 2254.6, 2255.6, 2264.6, 2240.6, 38655.0],
        [1637622000.0, 2237.1, 2262.6, 2268.6, 2224.6, 44280.0],
        [1637708400.0, 2266.6, 2241.6, 2275.6, 2229.6, 42162.0],
        [1637794800.0, 2250.1, 2222.6, 2250.6, 2216.6, 24772.0],
        [1637881200.0, 2179.1, 2140.6, 2183.6, 2140.6, 54238.0],
        [1638140400.0, 2153.6, 2149.6, 2167.6, 2122.6, 50282.0],
        [1638226800.0, 2127.1, 2193.6, 2198.6, 2108.6, 58562.0],
        [1638313200.0, 2209.1, 2209.6, 2226.6, 2191.6, 42965.0],
        [1638399600.0, 2207.1, 2200.6, 2207.1, 2176.8, 43735.0],
        [1638486000.0, 2209.1, 2175.6, 2221.6, 2173.6, 38482.0],
        [1638745200.0, 2183.1, 2188.6, 2200.6, 2174.6, 37058.0],
        [1638831600.0, 2205.1, 2226.6, 2238.6, 2205.1, 32651.0],
        [1638918000.0, 2235.1, 2222.6, 2245.6, 2215.6, 32927.0],
        [1639004400.0, 2226.1, 2209.6, 2236.6, 2188.6, 36900.0],
        [1639090800.0, 2204.6, 2215.6, 2227.6, 2201.6, 25002.0],
        [1639350000.0, 2222.1, 2209.6, 2243.6, 2205.6, 36107.0],
        [1639436400.0, 2210.1, 2211.6, 2232.6, 2199.6, 37287.0],
        [1639522800.0, 2214.6, 2158.6, 2215.6, 2157.6, 38220.0],
        [1639609200.0, 2163.6, 2205.6, 2216.6, 2163.6, 31612.0],
        [1639695600.0, 2223.1, 2207.6, 2225.6, 2202.6, 35430.0],
        [1639954800.0, 2179.1, 2202.6, 2206.6, 2160.6, 43399.0],
        [1640041200.0, 2220.1, 2208.6, 2222.6, 2197.6, 29123.0],
        [1640127600.0, 2200.1, 2220.6, 2220.6, 2194.6, 19139.0],
        [1640214000.0, 2221.1, 2231.6, 2237.6, 2221.1, 16804.0],
        [1640559600.0, 2231.1, 2235.6, 2246.6, 2224.6, 20153.0],
        [1640646000.0, 2243.1, 2267.6, 2267.6, 2226.6, 24291.0],
        [1640732400.0, 2265.1, 2270.6, 2276.6, 2256.6, 21491.0],
        [1640818800.0, 2274.1, 2275.6, 2277.6, 2262.6, 16068.0],
        [1641164400.0, 2283.1, 2292.6, 2311.6, 2283.1, 29191.0],
        [1641250800.0, 2293.6, 2304.6, 2309.6, 2290.6, 26642.0],
        [1641337200.0, 2299.1, 2313.6, 2315.6, 2293.6, 24472.0],
        [1641510000.0, 2304.1, 2313.6, 2316.6, 2281.6, 43665.0],
        [1641769200.0, 2314.1, 2290.6, 2326.6, 2289.6, 35700.0],
        [1641855600.0, 2304.1, 2344.6, 2345.6, 2299.6, 41439.0],
        [1641942000.0, 2359.1, 2414.6, 2416.6, 2350.6, 44820.0],
        [1642028400.0, 2418.6, 2419.6, 2434.6, 2402.6, 39785.0],
        [1642114800.0, 2403.1, 2388.6, 2422.6, 2380.6, 41312.0],
        [1642374000.0, 2398.1, 2374.6, 2398.1, 2369.6, 22954.0],
        [1642460400.0, 2364.1, 2329.6, 2365.6, 2325.6, 39455.0],
        [1642546800.0, 2303.1, 2331.6, 2346.6, 2301.6, 38360.0],
        [1642633200.0, 2333.1, 2324.6, 2342.6, 2311.6, 36271.0],
        [1642719600.0, 2295.1, 2281.6, 2300.6, 2267.6, 43981.0],
        [1642978800.0, 2270.6, 2177.6, 2288.6, 2164.6, 70282.0],
        [1643065200.0, 2179.1, 2206.6, 2221.6, 2176.6, 65451.0],
        [1643151600.0, 2225.1, 2235.6, 2254.6, 2212.6, 46419.0],
        [1643238000.0, 2211.1, 2233.6, 2247.6, 2204.6, 57363.0],
        [1643324400.0, 2231.1, 2184.6, 2242.6, 2175.6, 58206.0],
        [1643583600.0, 2222.1, 2215.6, 2225.6, 2199.6, 39298.0],
        [1643670000.0, 2229.1, 2225.6, 2243.6, 2217.6, 35816.0],
        [1643756400.0, 2243.1, 2255.6, 2264.6, 2225.6, 36987.0],
        [1643842800.0, 2247.1, 2237.6, 2258.6, 2229.6, 37570.0],
        [1643929200.0, 2243.1, 2188.6, 2246.6, 2182.6, 41169.0],
        [1644188400.0, 2192.1, 2173.6, 2203.6, 2150.6, 52277.0],
        [1644274800.0, 2172.6, 2217.6, 2217.6, 2168.3, 43890.0],
        [1644361200.0, 2230.1, 2230.6, 2241.6, 2222.6, 30645.0],
        [1644447600.0, 2239.1, 2221.6, 2245.6, 2205.6, 44823.0],
        [1644534000.0, 2199.1, 2208.6, 2210.6, 2179.6, 40380.0],
        [1644793200.0, 2164.6, 2161.6, 2176.6, 2124.6, 69692.0],
        [1644879600.0, 2164.6, 2217.6, 2223.6, 2163.6, 53582.0],
        [1644966000.0, 2226.1, 2214.6, 2251.6, 2205.6, 47215.0],
        [1645052400.0, 2213.1, 2179.6, 2226.6, 2173.6, 46510.0],
        [1645138800.0, 2189.1, 2153.6, 2194.6, 2150.6, 50339.0],
        [1645398000.0, 2171.1, 2076.6, 2171.6, 2063.6, 69904.0],
        [1645484400.0, 2028.1, 2106.6, 2111.6, 2012.6, 74374.0],
        [1645570800.0, 2107.6, 2039.6, 2131.6, 2039.6, 71534.0],
        [1645657200.0, 1899.1, 1819.6, 1925.6, 1787.2, 125443.0],
        [1645743600.0, 1824.6, 1977.6, 1997.6, 1822.8, 133634.0],
        [1646002800.0, 1904.6, 1994.6, 2011.6, 1881.6, 82959.0],
        [1646089200.0, 2018.1, 1964.6, 2051.6, 1962.6, 99753.0],
        [1646175600.0, 1954.1, 2041.6, 2044.6, 1931.6, 107650.0],
        [1646262000.0, 2062.1, 2008.6, 2064.6, 2000.6, 84961.0],
        [1646348400.0, 1985.1, 1917.6, 1994.6, 1889.6, 114522.0],
        [1646607600.0, 1869.1, 1939.6, 1958.6, 1855.6, 131910.0],
        [1646694000.0, 1919.1, 1902.6, 1971.6, 1896.6, 112000.0],
        [1646780400.0, 1938.1, 1973.6, 1978.6, 1927.6, 88784.0],
        [1646866800.0, 1981.1, 1970.6, 1984.6, 1942.6, 102599.0],
        [1646953200.0, 1985.1, 2037.6, 2046.6, 1971.6, 108577.0],
        [1647212400.0, 2054.1, 1974.6, 2054.6, 1969.6, 105063.0],
        [1647298800.0, 1957.1, 2017.6, 2020.6, 1948.6, 86755.0],
        [1647385200.0, 2027.1, 2044.6, 2065.6, 2022.6, 94322.0],
        [1647471600.0, 2061.1, 2115.6, 2122.6, 2058.0, 53459.0],
        [1647558000.0, 2143.1, 2110.6, 2151.6, 2107.6, 56020.0],
        [1647817200.0, 2105.6, 2107.6, 2135.6, 2094.6, 39366.0],
        [1647903600.0, 2109.1, 2138.6, 2142.6, 2104.6, 32221.0],
        [1647990000.0, 2147.1, 2130.6, 2160.6, 2115.6, 55455.0],
        [1648076400.0, 2139.1, 2165.6, 2170.6, 2122.6, 49939.0],
        [1648162800.0, 2159.6, 2125.6, 2163.6, 2116.6, 49029.0],
        [1648418400.0, 2130.1, 2136.6, 2158.6, 2127.6, 45313.0],
        [1648504800.0, 2141.1, 2187.6, 2197.6, 2119.6, 69174.0],
        [1648591200.0, 2187.1, 2203.6, 2206.6, 2173.6, 48263.0],
        [1648677600.0, 2195.6, 2165.6, 2198.6, 2161.6, 41685.0],
        [1648764000.0, 2157.1, 2173.6, 2185.6, 2156.6, 38431.0],
        [1649023200.0, 2184.1, 2172.6, 2195.6, 2159.6, 44058.0],
        [1649109600.0, 2174.6, 2141.6, 2186.6, 2134.6, 38325.0],
        [1649196000.0, 2141.6, 2114.6, 2144.6, 2095.6, 58879.0],
        [1649282400.0, 2121.1, 2089.6, 2132.6, 2087.6, 55119.0],
        [1649368800.0, 2105.1, 2087.6, 2113.6, 2083.7, 43687.0],
        [1649628000.0, 2092.6, 2129.6, 2133.6, 2072.6, 48992.0],
        [1649714400.0, 2128.1, 2110.6, 2128.1, 2104.6, 52741.0],
        [1649800800.0, 2114.1, 2113.6, 2122.6, 2093.8, 40848.0],
        [1649887200.0, 2126.1, 2104.6, 2126.1, 2098.6, 29230.0],
        [1650319200.0, 2106.1, 2088.6, 2110.6, 2053.6, 50120.0],
        [1650405600.0, 2087.1, 2060.6, 2107.6, 2060.6, 52218.0],
        [1650492000.0, 2064.1, 2042.6, 2080.6, 2039.6, 47939.0],
        [1650578400.0, 2026.1, 1989.6, 2031.6, 1987.6, 46267.0],
        [1650837600.0, 1961.6, 1945.6, 1979.6, 1923.6, 73140.0],
        [1650924000.0, 1954.1, 1903.6, 1960.6, 1903.6, 60864.0],
        [1651010400.0, 1901.1, 1887.6, 1913.6, 1875.6, 70354.0],
        [1651096800.0, 1914.1, 1888.6, 1920.6, 1879.6, 50637.0],
        [1651183200.0, 1919.1, 1865.6, 1920.6, 1857.6, 66887.0],
        [1651442400.0, 1871.1, 1841.6, 1871.1, 1822.6, 58650.0],
        [1651615200.0, 1849.1, 1822.6, 1849.1, 1813.6, 50135.0]
    ]

    return pd.DataFrame(data, columns=['timestamp', 'open', 'close', 'high', 'low', 'volume'])


def prepare(filename) -> DataFrame:
    raw_df = pd.read_csv(filename)
    df = raw_df.rename(
        columns={'<TICKER>': 'symbol', '<DATE>': 'timestamp', '<OPEN>': 'open', '<CLOSE>': 'close', '<HIGH>': 'high',
                 '<LOW>': 'low', '<VOL>': 'volume'}, inplace=False)

    # symbol = df['symbol'].iloc[0]
    # print(f'running check on {symbol}')

    df['timestamp'] = df['timestamp'].apply(lambda val: datetime.strptime(str(val), '%Y%m%d'))
    return df[['symbol', 'timestamp', 'open', 'close', 'high', 'low', 'volume']]


def from_api(user_id, password, symbol, period):
    print("Executing from_api")
    client = APIClient()
    loginResponse = client.execute(loginCommand(userId=user_id, password=password))

    result = None
    if not loginResponse['status']:
        print('Login failed. Error code: {0}'.format(loginResponse['errorCode']))
    else:
        local_tz = pendulum.timezone('Europe/Warsaw')
        run_at = pendulum.now(tz=local_tz)
        ea_settings = ExpertAdvisorSettings(
            client=client,
            symbol=symbol,
            period=period,
            run_at=run_at
        )
        ea = ExpertAdvisor(ea_settings)
        result = ea.from_api()

    client.commandExecute('logout')
    client.disconnect()

    return result


class Tester:
    def __init__(self, args, strategy):
        self._args = args
        self._strategy = strategy

    def analyze(self, dataframe, backtest_provider: Backtest = None, output_file: str = None, plot_func=None):
        scenario_name = self._strategy.settings['scenario_name']

        if backtest_provider is not None:
            backtest_provider.run_backtest(scenario_name, dataframe, output_file)

        if plot_func is not None:
            plot_func(scenario_name, dataframe)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--user_id', type=int, required=False)
    parser.add_argument('--password', type=str, required=False)
    args = parser.parse_args()

    backtest_output_file = '/Users/me/Desktop/Temp/Test.csv'

    metadata = [
        (symbol, period)
        for symbol in ['W20']
        for period in [5, 15]
    ]
    for _, inputs in enumerate(metadata):
        symbol = inputs[0]
        period = inputs[1]

        raw_data = from_api(args.user_id, args.password, symbol, period)

        waves_scenario_list = [
            (symbol, period, distance)
            for symbol in ['US500']
            for period in [5, 15]
            for distance in [20, 30, 40, 50, 60, 70]
            # for symbol in ['US500']
            # for period in [5]  # , 15, 30]
            # for distance in [30]
        ]
        for _, element_from_outer in enumerate(waves_scenario_list):
            distance = element_from_outer[2]
            scenario_name = f'{symbol}-{period}-{distance}'
            #
            waves_settings = dict(
                scenario_name=scenario_name,
                symbol=symbol,
                period=period,
                distance=distance
            )
            waves_df = Waves(waves_settings).analyze(raw_data)

            consolidation_scenario_list = [
                (allowed_wave_percent_change, waves_height_quantile, minimum_waves_count, trailing_sl)
                for allowed_wave_percent_change in [0.1, 0.2, 0.3, 0.4, 0.5, 0.75, 1.0, 1.25, 1.50, 1.75, 2.0]
                for waves_height_quantile in [0.5, 0.6, 0.7, 0.8, 0.9]
                for minimum_waves_count in [5, 6, 7, 8]
                for trailing_sl in [10, 20, 30, 40, 50, 60]
                # for allowed_wave_percent_change in [1.0]
                # for waves_height_quantile in [0.8]
                # for minimum_waves_count in [5]
                # for trailing_sl in [10]
            ]
            for _, element_from_inner in enumerate(consolidation_scenario_list):
                allowed_wave_percent_change = element_from_inner[0]
                waves_height_quantile = element_from_inner[1]
                minimum_waves_count = element_from_inner[2]
                trailing_sl = element_from_inner[3]
                scenario_name = f'{symbol}-{period}-{distance}-{allowed_wave_percent_change}-{waves_height_quantile}-{minimum_waves_count}-{trailing_sl}'
                consolidation_settings = dict(
                    scenario_name=scenario_name,
                    symbol=symbol,
                    period=period,
                    allowed_wave_percent_change=allowed_wave_percent_change,
                    waves_height_quantile=waves_height_quantile,
                    minimum_waves_count=minimum_waves_count,
                    trailing_sl=trailing_sl
                )
                consolidation_strategy = Consolidation(consolidation_settings)
                consolidation_df = consolidation_strategy.analyze(
                    waves_df
                )
                if not consolidation_df.empty:
                    consolidation_backtest = ConsolidationBacktest(dict(trailing_sl=trailing_sl))
                    Tester(args, consolidation_strategy).analyze(
                        consolidation_df,
                        consolidation_backtest,
                        backtest_output_file
                        # plot=consolidation_strategy.plot_chart
                    )
